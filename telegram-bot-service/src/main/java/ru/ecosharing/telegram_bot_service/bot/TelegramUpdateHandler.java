package ru.ecosharing.telegram_bot_service.bot;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.stereotype.Component;
import org.telegram.telegrambots.meta.api.methods.BotApiMethod;
import org.telegram.telegrambots.meta.api.methods.send.SendMessage;
import org.telegram.telegrambots.meta.api.methods.updatingmessages.EditMessageText;
import org.telegram.telegrambots.meta.api.objects.CallbackQuery;
import org.telegram.telegrambots.meta.api.objects.Message;
import org.telegram.telegrambots.meta.api.objects.Update;
import org.telegram.telegrambots.meta.api.objects.User;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.InlineKeyboardMarkup;
import org.telegram.telegrambots.meta.api.objects.replykeyboard.buttons.InlineKeyboardButton;
import org.telegram.telegrambots.meta.api.objects.webapp.WebAppInfo;

import java.util.ArrayList;
import java.util.List;

/**
 * –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π –æ—Ç Telegram (–∫—Ä–æ–º–µ –ø–ª–∞—Ç–µ–∂–µ–π).
 * –û—Å–Ω–æ–≤–Ω–∞—è –∑–∞–¥–∞—á–∞ - –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É –¥–ª—è –≤—Ö–æ–¥–∞ –≤ Mini App.
 */
@Slf4j
@Component
@RequiredArgsConstructor
public class TelegramUpdateHandler {

    @Value("${bot.mini-app-url}") // URL Mini App –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    private String MINI_APP_URL;

    /**
     * –ì–ª–∞–≤–Ω—ã–π –º–µ—Ç–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π (–∫—Ä–æ–º–µ –ø–ª–∞—Ç–µ–∂–µ–π).
     */
    public BotApiMethod<?> handleUpdate(Update update) {
        try {
            if (update.hasMessage() && update.getMessage().hasText()) {
                return handleTextMessage(update.getMessage());
            } else if (update.hasCallbackQuery()) {
                return handleCallbackQuery(update.getCallbackQuery());
            } else if (update.hasMyChatMember()) {
                handleMyChatMember(update);
                return null;
            } else {
                log.debug("Unhandled update type received: {}", update);
                return null;
            }
        } catch (Exception e) {
            log.error("Error handling update ID {}", update.getUpdateId(), e);
            Long chatId = getChatIdFromUpdate(update);
            if (chatId != null) {
                return new SendMessage(chatId.toString(), "–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–æ–º–∞–Ω–¥—ã.");
            }
            return null;
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.
     */
    private BotApiMethod<?> handleTextMessage(Message message) {
        String text = message.getText();
        Long chatId = message.getChatId();
        User user = message.getFrom();

        log.info("Received message from User ID: {}, Chat ID: {}, Text: '{}'", user.getId(), chatId, text);

        if (text.startsWith("/")) {
            String command = text.split(" ")[0].toLowerCase();
            switch (command) {
                case "/start":
                    return handleStartCommand(chatId);
                case "/app":
                case "/webapp":
                    return createOpenAppMessage(chatId, "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:");
                default:
                    return createOpenAppMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! üëã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:");
            }
        } else {
            // –û—Ç–≤–µ—Ç –Ω–∞ –æ–±—ã—á–Ω—ã–π —Ç–µ–∫—Å—Ç - –ø—Ä–µ–¥–ª–∞–≥–∞–µ–º –æ—Ç–∫—Ä—ã—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
            return createOpenAppMessage(chatId, "–ü—Ä–∏–≤–µ—Ç! üëã –î–ª—è —Ä–∞–±–æ—Ç—ã —Å —Å–µ—Ä–≤–∏—Å–æ–º –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—à–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ:");
        }
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /start - –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–µ –∏ –∫–Ω–æ–ø–∫—É Mini App.
     */
    private BotApiMethod<?> handleStartCommand(Long chatId) {
        log.info("User {} started the bot", chatId);
        String welcomeText = "üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoSharing!\n\n" +
                "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—â–∏ –∏–ª–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏.\n\n" +
                "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!";
        return createOpenAppMessage(chatId, welcomeText);
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è Mini App.
     */
    private SendMessage createOpenAppMessage(Long chatId, String text) {
        SendMessage message = new SendMessage();
        message.setChatId(chatId.toString());
        message.setText(text);
        message.setReplyMarkup(createOpenAppKeyboard());
        message.setParseMode("HTML");
        return message;
    }

    private InlineKeyboardMarkup createOpenAppKeyboard() {
        InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
        List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
        List<InlineKeyboardButton> row = new ArrayList<>();

        // –°–æ–∑–¥–∞–µ–º URL-–∫–Ω–æ–ø–∫—É –≤–º–µ—Å—Ç–æ WebApp –∫–Ω–æ–ø–∫–∏
        InlineKeyboardButton appButton = new InlineKeyboardButton();
        appButton.setText("üå± –û—Ç–∫—Ä—ã—Ç—å EcoSharing App");
        appButton.setUrl(MINI_APP_URL);
        row.add(appButton);
        keyboard.add(row);

        // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –ø–æ–º–æ—â–∏
        List<InlineKeyboardButton> secondRow = new ArrayList<>();
        InlineKeyboardButton helpButton = new InlineKeyboardButton();
        helpButton.setText("‚ùì –ü–æ–º–æ—â—å");
        helpButton.setCallbackData("help");
        secondRow.add(helpButton);
        keyboard.add(secondRow);

        keyboardMarkup.setKeyboard(keyboard);
        return keyboardMarkup;
    }


    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –Ω–∞–∂–∞—Ç–∏—è –Ω–∞ inline –∫–Ω–æ–ø–∫–∏ (CallbackQuery).
     * –û—Å—Ç–∞–≤–ª—è–µ–º –∑–∞–≥–æ—Ç–æ–≤–∫—É, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±—è—Ç—Å—è –¥—Ä—É–≥–∏–µ –∫–Ω–æ–ø–∫–∏ –∫—Ä–æ–º–µ Mini App.
     */
    private BotApiMethod<?> handleCallbackQuery(CallbackQuery callbackQuery) {
        String callbackData = callbackQuery.getData();
        Long chatId = callbackQuery.getMessage().getChatId();
        Integer messageId = callbackQuery.getMessage().getMessageId();
        User user = callbackQuery.getFrom();

        log.info("Callback query from User ID: {}, Chat ID: {}, Msg ID: {}, Data: '{}'",
                user.getId(), chatId, messageId, callbackData);

        if ("help".equals(callbackData)) {
            // –†–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId.toString());
            editMessage.setMessageId(messageId);
            editMessage.setText("üì± EcoSharing - –≤–∞—à —Å–µ—Ä–≤–∏—Å –¥–ª—è –∞—Ä–µ–Ω–¥—ã –≤–µ—â–µ–π.\n\n" +
                    "üå± –î–µ–ª–∏—Ç–µ—Å—å –≤–µ—â–∞–º–∏\n" +
                    "üí∞ –≠–∫–æ–Ω–æ–º—å—Ç–µ –¥–µ–Ω—å–≥–∏\n" +
                    "üåé –ë–µ—Ä–µ–≥–∏—Ç–µ –ø–ª–∞–Ω–µ—Ç—É\n" +
                    "üîç –ù–∞—Ö–æ–¥–∏—Ç–µ —á—Ç–æ —É–≥–æ–¥–Ω–æ\n");

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫–Ω–æ–ø–∫—É –º–∏–Ω–∏-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();

            InlineKeyboardButton appButton = new InlineKeyboardButton();
            appButton.setText("üå± –û—Ç–∫—Ä—ã—Ç—å EcoSharing");
            appButton.setUrl(MINI_APP_URL);
            row.add(appButton);
            keyboard.add(row);

            // –î–æ–±–∞–≤–ª—è–µ–º –∫–Ω–æ–ø–∫—É –≤–æ–∑–≤—Ä–∞—Ç–∞
            List<InlineKeyboardButton> secondRow = new ArrayList<>();
            InlineKeyboardButton backButton = new InlineKeyboardButton();
            backButton.setText("‚óÄÔ∏è –ù–∞–∑–∞–¥");
            backButton.setCallbackData("back");
            secondRow.add(backButton);
            keyboard.add(secondRow);

            keyboardMarkup.setKeyboard(keyboard);
            editMessage.setReplyMarkup(keyboardMarkup);

            return editMessage;
        } else if ("back".equals(callbackData)) {
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –æ—Å–Ω–æ–≤–Ω–æ–º—É —Å–æ–æ–±—â–µ–Ω–∏—é
            EditMessageText editMessage = new EditMessageText();
            editMessage.setChatId(chatId.toString());
            editMessage.setMessageId(messageId);
            editMessage.setText("üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EcoSharing!\n\n" +
                    "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –∞—Ä–µ–Ω–¥–æ–≤–∞—Ç—å –≤–µ—â–∏ –∏–ª–∏ –¥–µ–ª–∏—Ç—å—Å—è —Å–≤–æ–∏–º–∏.\n\n" +
                    "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å!");

            // –í–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
            InlineKeyboardMarkup keyboardMarkup = new InlineKeyboardMarkup();
            List<List<InlineKeyboardButton>> keyboard = new ArrayList<>();
            List<InlineKeyboardButton> row = new ArrayList<>();

            InlineKeyboardButton appButton = new InlineKeyboardButton();
            appButton.setText("üå± –û—Ç–∫—Ä—ã—Ç—å EcoSharing");
            appButton.setUrl(MINI_APP_URL);
            row.add(appButton);
            keyboard.add(row);

            List<InlineKeyboardButton> secondRow = new ArrayList<>();
            InlineKeyboardButton helpButton = new InlineKeyboardButton();
            helpButton.setText("‚ùì –ü–æ–º–æ—â—å");
            helpButton.setCallbackData("help");
            secondRow.add(helpButton);
            keyboard.add(secondRow);

            keyboardMarkup.setKeyboard(keyboard);
            editMessage.setReplyMarkup(keyboardMarkup);

            return editMessage;
        }
        log.warn("Received unhandled callback data: {}", callbackData);
        return null;
    }

    /**
     * –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Å–æ–±—ã—Ç–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —á–∞—Ç–µ.
     */
    private void handleMyChatMember(Update update) {
        String oldStatus = update.getMyChatMember().getOldChatMember().getStatus();
        String newStatus = update.getMyChatMember().getNewChatMember().getStatus();
        Long userId = update.getMyChatMember().getFrom().getId();
        Long chatId = update.getMyChatMember().getChat().getId();

        log.info("Chat Member Status change: User ID: {}, Chat ID: {}. From '{}' to '{}'",
                userId, chatId, oldStatus, newStatus);

        if ("kicked".equals(newStatus) || "left".equals(newStatus)) {
            log.info("User {} blocked or left the bot.", userId);
            // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ –±–ª–æ–∫–∏—Ä–æ–≤–∫–µ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –¥–µ–∞–∫—Ç–∏–≤–∞—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ user-service)
            // userServiceClient.disableNotifications(userId);
        } else if (("member".equals(newStatus) || "administrator".equals(newStatus) || "creator".equals(newStatus))) {
            log.info("User {} started or unblocked the bot.", userId);
            // –î–µ–π—Å—Ç–≤–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ/—Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∫–µ
            // userServiceClient.enableNotifications(userId);
        }
    }

    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è Chat ID
    private Long getChatIdFromUpdate(Update update) {
        if (update.hasMessage()) return update.getMessage().getChatId();
        if (update.hasEditedMessage()) return update.getEditedMessage().getChatId();
        if (update.hasCallbackQuery() && update.getCallbackQuery().getMessage() != null) return update.getCallbackQuery().getMessage().getChatId();
        return null;
    }

}