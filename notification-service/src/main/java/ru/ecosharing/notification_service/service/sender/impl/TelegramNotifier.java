package ru.ecosharing.notification_service.service.sender.impl;

import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.kafka.core.KafkaTemplate;
import org.springframework.kafka.support.SendResult;
import org.springframework.scheduling.annotation.Async;
import org.springframework.stereotype.Service;
import ru.ecosharing.notification_service.dto.UserProfileDto;
import ru.ecosharing.notification_service.dto.kafka.TelegramSendMessageKafkaDto;
import ru.ecosharing.notification_service.exception.NotificationSendException;
import ru.ecosharing.notification_service.model.enums.NotificationChannel;
import ru.ecosharing.notification_service.service.sender.Notifier;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;
import java.util.UUID;
import java.util.concurrent.CompletableFuture;

/**
 * –†–µ–∞–ª–∏–∑–∞—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ Telegram —á–µ—Ä–µ–∑ Kafka.
 * –§–æ—Ä–º–∏—Ä—É–µ—Ç DTO –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –µ–≥–æ –≤ Kafka —Ç–æ–ø–∏–∫, –ø—Ä–µ–¥–Ω–∞–∑–Ω–∞—á–µ–Ω–Ω—ã–π –¥–ª—è telegram-bot-service.
 */
@Slf4j
@Service
@RequiredArgsConstructor
public class TelegramNotifier implements Notifier {

    private final KafkaTemplate<String, TelegramSendMessageKafkaDto> telegramKafkaTemplate;

    @Value("${kafka.topic.telegram-send-requests}")
    private String telegramSendTopic;

    @Value("${app.telegram.webapp-url:}")
    private String baseWebAppUrl;


    @Override
    public NotificationChannel getChannel() {
        return NotificationChannel.TELEGRAM;
    }

    /**
     * –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É Telegram —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka.
     *
     * @param recipient –ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—É—á–∞—Ç–µ–ª—è (–Ω—É–∂–µ–Ω telegramId).
     * @param subject –¢–µ–º–∞ (–Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –¥–ª—è Telegram Push).
     * @param formattedText HTML-—Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è.
     * @param params –ò—Å—Ö–æ–¥–Ω—ã–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã (–¥–ª—è –≤–æ–∑–º–æ–∂–Ω–æ–π –∫–Ω–æ–ø–∫–∏).
     * @param targetUrl –û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π URL –¥–ª—è deeplink –≤ WebApp –∫–Ω–æ–ø–∫–µ.
     * @param attachWebAppButton –§–ª–∞–≥: –ø—Ä–∏–∫—Ä–µ–ø–ª—è—Ç—å –ª–∏ –∫–Ω–æ–ø–∫—É WebApp.
     */
    @Async
    @Override
    public void send(UserProfileDto recipient,
                     String subject,
                     String formattedText,
                     Map<String, String> params,
                     String targetUrl,
                     boolean attachWebAppButton) {

        String recipientTelegramId = recipient.getTelegramId();
        UUID userId = recipient.getUserId();

        // 1. –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è Telegram ID
        if (recipientTelegramId == null || recipientTelegramId.isBlank()) {
            log.warn("TelegramNotifier: –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ - telegramId –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ID {}", userId);
            return;
        }

        log.debug("TelegramNotifier: –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Kafka —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TG ID {}", recipientTelegramId);

        // 2. –°–æ–∑–¥–∞–µ–º DTO –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka
        TelegramSendMessageKafkaDto kafkaDto = new TelegramSendMessageKafkaDto();
        kafkaDto.setChatId(recipientTelegramId);
        kafkaDto.setText(formattedText);
        kafkaDto.setParseMode("HTML");

        // 3. –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É (–∫–Ω–æ–ø–∫—É WebApp), –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        if (attachWebAppButton) {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–¥–∞–Ω –ª–∏ –±–∞–∑–æ–≤—ã–π URL –¥–ª—è WebApp
            if (baseWebAppUrl == null || baseWebAppUrl.isBlank()) {
                log.warn("–ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø—Ä–∏–∫—Ä–µ–ø–∏—Ç—å –∫–Ω–æ–ø–∫—É WebApp: —Å–≤–æ–π—Å—Ç–≤–æ 'app.telegram.webapp-url' –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ.");
            } else {
                kafkaDto.setReplyMarkup(createKafkaWebAppKeyboard(params, targetUrl));
            }
        }

        // 4. –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Kafka
        try {
            // –ò—Å–ø–æ–ª—å–∑—É–µ–º chatId –∫–∞–∫ –∫–ª—é—á Kafka —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –ø–∞—Ä—Ç–∏—Ü–∏–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
            // –°–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ–¥–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –ø–æ–ø–∞–¥—É—Ç –≤ –æ–¥–Ω—É –ø–∞—Ä—Ç–∏—Ü–∏—é (—Å–æ—Ö—Ä–∞–Ω—è–µ—Ç –ø–æ—Ä—è–¥–æ–∫ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è)
            CompletableFuture<SendResult<String, TelegramSendMessageKafkaDto>> future =
                    telegramKafkaTemplate.send(telegramSendTopic, recipientTelegramId, kafkaDto);

            // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ (–∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π)
            future.whenComplete((result, ex) -> {
                if (ex == null) {
                    // –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ Kafka
                    log.info("TelegramNotifier: –ó–∞–ø—Ä–æ—Å –Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è TG ID {} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Kafka (Topic: {}, Partition: {}, Offset: {})",
                            recipientTelegramId,
                            result.getRecordMetadata().topic(),
                            result.getRecordMetadata().partition(),
                            result.getRecordMetadata().offset());
                } else {
                    // –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Kafka
                    log.error("TelegramNotifier: –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞ –¥–ª—è TG ID {} –≤ Kafka —Ç–æ–ø–∏–∫ {}: {}",
                            recipientTelegramId, telegramSendTopic, ex.getMessage(), ex);
                    throw new NotificationSendException("–û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Kafka –¥–ª—è Telegram", ex, getChannel());
                }
            });

        } catch (Exception e) {
            // –û—à–∏–±–∫–∞ –Ω–∞ —ç—Ç–∞–ø–µ –î–û –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Kafka (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–∏ —Å–µ—Ä–∏–∞–ª–∏–∑–∞—Ü–∏–∏)
            log.error("TelegramNotifier: –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –∫ –æ—Ç–ø—Ä–∞–≤–∫–µ –≤ Kafka –¥–ª—è TG ID {}: {}",
                    recipientTelegramId, e.getMessage(), e);
            throw new NotificationSendException("–û—à–∏–±–∫–∞ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è Kafka –¥–ª—è Telegram", e, getChannel());
        }
    }

    /**
     * –°–æ–∑–¥–∞–µ—Ç DTO –¥–ª—è Inline –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã —Å –∫–Ω–æ–ø–∫–æ–π WebApp –¥–ª—è Kafka DTO.
     * @param params –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è (–º–æ–≥—É—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å screenPath).
     * @param targetUrl –Ø–≤–Ω–æ –∑–∞–¥–∞–Ω–Ω—ã–π URL/–ø—É—Ç—å –¥–ª—è –∫–Ω–æ–ø–∫–∏.
     * @return DTO –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏–ª–∏ null, –µ—Å–ª–∏ URL –Ω–µ —É–¥–∞–ª–æ—Å—å —Å—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞—Ç—å.
     */
    private TelegramSendMessageKafkaDto.InlineKeyboardMarkupDto createKafkaWebAppKeyboard(Map<String, String> params, String targetUrl) {
        List<List<TelegramSendMessageKafkaDto.InlineKeyboardButtonDto>> keyboard = new ArrayList<>();
        List<TelegramSendMessageKafkaDto.InlineKeyboardButtonDto> row = new ArrayList<>();

        TelegramSendMessageKafkaDto.InlineKeyboardButtonDto appButton = new TelegramSendMessageKafkaDto.InlineKeyboardButtonDto();
        appButton.setText("üå± –û—Ç–∫—Ä—ã—Ç—å EcoSharing");

        String finalUrl = baseWebAppUrl;
        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—É—Ç—å –≤–Ω—É—Ç—Ä–∏ WebApp (–ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç —É targetUrl)
        String screenPath = targetUrl != null ? targetUrl : (params != null ? params.get("screenPath") : null);
        if (screenPath != null && !screenPath.isBlank()) {
            // –£–±–∏—Ä–∞–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–π —Å–ª—ç—à –≤ –Ω–∞—á–∞–ª–µ –∏ –¥–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä startapp
            screenPath = screenPath.startsWith("/") ? screenPath.substring(1) : screenPath;
            // –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä –±–µ–∑–æ–ø–∞—Å–Ω–æ, –ø—Ä–æ–≤–µ—Ä—è—è –Ω–∞–ª–∏—á–∏–µ '?'
            if (finalUrl.contains("?")) {
                finalUrl += "&startapp=" + screenPath;
            } else {
                finalUrl += "?startapp=" + screenPath;
            }
        }
        appButton.setUrl(finalUrl);
        appButton.setCallbackData(null);

        row.add(appButton);
        keyboard.add(row);

        TelegramSendMessageKafkaDto.InlineKeyboardMarkupDto keyboardMarkupDto = new TelegramSendMessageKafkaDto.InlineKeyboardMarkupDto();
        keyboardMarkupDto.setInlineKeyboard(keyboard);
        return keyboardMarkupDto;
    }
}